apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: harbor-test-image-pipeline
spec:
  params:
    - name: git-revision
      type: object
      properties:
        url: { type: string }
        branch: { type: string }
        commit: { type: string }
    - name: test-image
      type: object
      properties:
        repo: { type: string }
        context: { type: string }
        dockerfile: { type: string }
      default:
        context: .
        dockerfile: Dockerfile
    # - name: test
    #   type: object
    #   properties:
    #     command: { type: string }
  workspaces:
    - name: source
      description: Workspace for shared code source
    - name: basic-auth
      optional: true
      description: >
        A Workspace containing a .gitconfig and .git-credentials file. These
        will be copied to the user's home before any git commands are run. Any
        other files in this Workspace are ignored. It is strongly recommended
        to use ssh-directory over basic-auth whenever possible and to bind a
        Secret to this Workspace over other volume types.
    - name: gitversion-config
      optional: true
      description: >
        A Workspace containing a gitversion-config file. This file is used to set the git version.
    - name: dockerconfig
      optional: true
      description: >
        A Workspace containing a dockerconfig file. This file is used to set the docker config.
  tasks:
    - name: git-clone
      timeout: 10m
      retries: 0
      taskRef:
        resolver: hub
        params:
          - name: catalog
            value: catalog
          - name: kind
            value: task
          - name: name
            value: git-clone
          - name: version
            value: "0.9"
          - name: depth
            value: 0
      params:
        - name: url
          value: $(params.git-revision.url)
        - name: revision
          value: $(params.git-revision.branch)
      workspaces:
        - name: output
          workspace: source
        - name: basic-auth
          workspace: basic-auth
    - name: git-version
      runAfter:
        - git-clone
      params:
        - name: gitversion-image
          value: registry.alauda.cn:60080/devops/gittools/gitversion:6.0.5
        - name: yq-image
          value: registry.alauda.cn:60080/devops/noroot/yq:latest
        - name: commit
          value: $(params.git-revision.commit)
        - name: config-file
          value: GitVersion.yaml
      taskRef:
        resolver: hub
        params:
          - name: catalog
            value: extras
          - name: kind
            value: task
          - name: name
            value: git-version
          - name: version
            value: "0.2"
      timeout: 10m0s
      workspaces:
        - name: source
          workspace: source
        - name: basic-auth
          workspace: basic-auth
        - name: config
          workspace: gitversion-config
    - name: build-image
      runAfter:
        - git-version
      taskRef:
        resolver: hub
        params:
          - name: catalog
            value: extras
          - name: kind
            value: task
          - name: name
            value: buildx
          - name: version
            value: "0.1"
      params:
        - name: buildx-image
          value: registry.alauda.cn:60080/devops/noroot/alauda-docker-buildx:latest
        - name: image-url
          value: $(params.test-image.repo)
        - name: image-tags
          value:
            - $(tasks.git-version.results.variables.SemVer)
        - name: context
          value: $(params.test-image.context)
        - name: dockerfile
          value: $(params.test-image.dockerfile)
        - name: platform
          value:
            - linux/amd64
        - name: labels
          value:
            - branch=$(params.git-revision.branch)
            - commit=$(params.git-revision.commit)
      workspaces:
        - name: source
          workspace: source
        - name: dockerconfig
          workspace: dockerconfig
    # - name: run-test
    #   runAfter:
    #     - build-image
    #   timeout: 60m
    #   retries: 0
    #   params:
    #     - name: image
    #       value: $(tasks.build-image.results.image-digests[0])
    #     - name: script
    #       value: $(params.test.command)
    #   taskRef:
    #     resolver: hub
    #     params:
    #       - name: catalog
    #         value: catalog
    #       - name: kind
    #         value: task
    #       - name: name
    #         value: run-script
    #       - name: version
    #         value: "0.1"
    #   workspaces:
    #     - name: source
    #       workspace: source
